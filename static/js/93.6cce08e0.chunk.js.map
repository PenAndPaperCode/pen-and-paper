{"version":3,"file":"static/js/93.6cce08e0.chunk.js","mappings":"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","sources":["components/DataTable.tsx"],"sourcesContent":["import React, { memo, useCallback, useEffect } from 'react';\nimport { AppData, DoneStatusType, LearningResource } from '../types';\n\ninterface DataTableProps {\n  selectedCategory: keyof AppData;\n  selectedTopic: string;\n  selectedSubtopic: string;\n  data: AppData;\n  doneStatus: DoneStatusType;\n  setDoneStatus: React.Dispatch<React.SetStateAction<DoneStatusType>>;\n}\n\ninterface ProblemWithName extends LearningResource {\n  name: string;\n}\n\nconst DataTable: React.FC<DataTableProps> = ({\n  selectedCategory,\n  selectedTopic,\n  selectedSubtopic,\n  data,\n  doneStatus,\n  setDoneStatus\n}) => {\n  // Debug logging to help identify issues\n  useEffect(() => {\n    // eslint-disable-next-line no-console\n    console.log('DataTable rendering with:', { selectedCategory, selectedTopic, selectedSubtopic });\n    // eslint-disable-next-line no-console\n    console.log('Data structure:', data[selectedCategory]?.[selectedTopic]);\n  }, [selectedCategory, selectedTopic, selectedSubtopic, data]);\n\n  // Get all problems for the selected category, topic, and subtopic\n  const getProblems = (): ProblemWithName[] => {\n    try {\n      // All categories now have a three-level structure\n      if (!data[selectedCategory]?.[selectedTopic]) {\n        // eslint-disable-next-line no-console\n        console.error(`Topic \"${selectedTopic}\" not found in ${selectedCategory} data`);\n        return [];\n      }\n      \n      // If subtopic is provided, use it\n      if (selectedSubtopic) {\n        const subtopicData = data[selectedCategory][selectedTopic][selectedSubtopic];\n        if (!subtopicData) {\n          // eslint-disable-next-line no-console\n          console.error(`Subtopic \"${selectedSubtopic}\" not found in \"${selectedTopic}\"`);\n          return [];\n        }\n        \n        // Get all problems from the subtopic\n        return Object.keys(subtopicData).map(problemKey => ({\n          name: problemKey,\n          ...(subtopicData[problemKey] as LearningResource)\n        }));\n      } else {\n        // If no subtopic, get the first problem from the first subtopic\n        const firstSubtopic = Object.keys(data[selectedCategory][selectedTopic])[0];\n        if (!firstSubtopic) return [];\n        \n        const subtopicData = data[selectedCategory][selectedTopic][firstSubtopic];\n        return Object.keys(subtopicData).map(problemKey => ({\n          name: `${firstSubtopic}: ${problemKey}`,\n          ...(subtopicData[problemKey] as LearningResource)\n        }));\n      }\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error('Error accessing data:', error);\n      return [];\n    }\n  };\n\n  const problems = getProblems();\n\n  const handleStatusChange = useCallback((problemKey: string) => {\n    setDoneStatus((prev) => ({\n      ...prev,\n      [problemKey]: !prev[problemKey],\n    }));\n  }, [setDoneStatus]);\n\n  if (problems.length === 0) {\n    return (\n      <div className=\"mt-4 text-gray-400\">\n        No problems found. Please check the console for any errors.\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"overflow-x-auto\">\n      <table className=\"mt-4 w-full border border-gray-600 rounded-lg shadow-sm text-white\" aria-label={`Problems for ${selectedSubtopic || selectedTopic}`}>\n        <thead className=\"bg-gray-800\">\n          <tr>\n            <th className=\"border border-gray-600 px-4 py-2 text-left\">\n              Name\n            </th>\n            <th className=\"border border-gray-600 px-4 py-2 text-left\">\n              YouTube Link\n            </th>\n            <th className=\"border border-gray-600 px-4 py-2 text-left\">\n              Platform\n            </th>\n            <th className=\"border border-gray-600 px-4 py-2 text-left\">GitHub URL</th>\n            <th className=\"border border-gray-600 px-4 py-2 text-left\">Done ?</th>\n          </tr>\n        </thead>\n        <tbody>\n          {problems.map((problem) => {\n            const problemKey = `${selectedCategory}_${selectedTopic}_${selectedSubtopic}_${problem.name}`;\n            const isCompleted = doneStatus[problemKey] || false;\n            \n            return (\n              <tr key={problemKey} className=\"hover:bg-gray-700 transition\">\n                <td className=\"border border-gray-600 px-4 py-2\">{problem.name}</td>\n                <td className=\"border border-gray-600 px-4 py-2\">\n                  {problem.youtube && problem.youtube !== 'NA' && problem.youtube.startsWith('http') ? (\n                    <a\n                      href={problem.youtube}\n                      className=\"text-blue-400 hover:underline\"\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                      aria-label={`YouTube tutorial for ${problem.name}`}\n                    >\n                      YouTube\n                    </a>\n                  ) : (\n                    <span className=\"text-gray-500\">{problem.youtube}</span>\n                  )}\n                </td>\n                <td className=\"border border-gray-600 px-4 py-2\">\n                  {problem.platform && problem.platform !== 'NA' && problem.platform.startsWith('http') ? (\n                    <a\n                      href={problem.platform}\n                      className=\"text-blue-400 hover:underline\"\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                      aria-label={`Platform link for ${problem.name}`}\n                    >\n                      {problem.platform.includes('geeksforgeeks') || problem.platform.includes('leetcode') ? 'Practice' :\n                       'Problem Link'}\n                    </a>\n                  ) : (\n                    problem.platform\n                  )}\n                </td>\n                <td className=\"border border-gray-600 px-4 py-2\">\n                  {problem.github && problem.github !== 'NA' && problem.github.startsWith('http') ? (\n                    <a\n                      href={problem.github}\n                      className=\"text-blue-400 hover:underline\"\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                      aria-label={`GitHub code for ${problem.name}`}\n                    >\n                      GitHub\n                    </a>\n                  ) : (\n                    <span className=\"text-gray-500\">{problem.github}</span>\n                  )}\n                </td>\n                <td className=\"border border-gray-600 px-4 py-2 text-center\">\n                  <div className=\"flex items-center justify-center\">\n                    <input\n                      id={`checkbox-${problemKey}`}\n                      type=\"checkbox\"\n                      checked={isCompleted}\n                      onChange={() => handleStatusChange(problemKey)}\n                      aria-label={`Mark ${problem.name} as ${isCompleted ? 'incomplete' : 'complete'}`}\n                      className=\"w-4 h-4\"\n                    />\n                    <label htmlFor={`checkbox-${problemKey}`} className=\"sr-only\">\n                      Mark as {isCompleted ? 'incomplete' : 'complete'}\n                    </label>\n                  </div>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nDataTable.displayName = 'DataTable';\n\nexport default memo(DataTable);\n"],"names":["DataTable","_ref","selectedCategory","selectedTopic","selectedSubtopic","data","doneStatus","setDoneStatus","useEffect","_data$selectedCategor","console","log","problems","getProblems","_data$selectedCategor2","error","concat","subtopicData","Object","keys","map","problemKey","_objectSpread","name","firstSubtopic","handleStatusChange","useCallback","prev","length","_jsx","className","children","_jsxs","problem","isCompleted","youtube","startsWith","href","target","rel","platform","includes","github","id","type","checked","onChange","htmlFor","displayName","memo"],"sourceRoot":""}