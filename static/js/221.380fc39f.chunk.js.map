{"version":3,"file":"static/js/221.380fc39f.chunk.js","mappings":"wKAYA,MAAMA,GAAkCC,EAAAA,EAAAA,OAAKC,IAOtC,IAPuC,KAC5CC,EAAI,iBACJC,EAAgB,cAChBC,EAAa,oBACbC,EAAmB,iBACnBC,EAAgB,oBAChBC,GACDN,EACC,MAAOO,EAAgBC,IAAqBC,EAAAA,EAAAA,UAAkC,CAAC,IACxEC,EAAkBC,IAA4BF,EAAAA,EAAAA,UAAwB,OAG7EG,EAAAA,EAAAA,YAAU,KACJT,GACFK,GAAkBK,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACjBD,GAAI,IACP,CAACV,IAAgB,QAGpB,CAACA,IAEJ,MAAMY,GAAsBC,EAAAA,EAAAA,cAAaC,IACvCb,GAAoBc,GAEdA,IAAiBD,GACnBZ,EAAiB,MACjBC,EAAoB,MACb,OAGTD,EAAiB,MACjBC,EAAoB,MACbW,OAER,CAACb,EAAqBC,EAAkBC,IAErCa,GAAmBH,EAAAA,EAAAA,cAAaI,IACpCf,GAAiBgB,GAEXA,IAAcD,GAChBd,EAAoB,MACb,OAGTA,EAAoB,MACbc,KAITZ,GAAkBK,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACjBD,GAAI,IACP,CAACO,IAAQ,QAEV,CAACf,EAAkBC,IAEhBgB,GAAsBN,EAAAA,EAAAA,cAAaO,IAEvCjB,EAAoBiB,GACpBZ,EAAyBY,KACxB,CAACjB,IAEJ,OACEkB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wCAAwCC,KAAK,aAAYC,UACtEH,EAAAA,EAAAA,KAAA,MAAIC,UAAU,YAAWE,SACtBC,OAAOC,KAAK5B,GAAM6B,KAAKb,IACtBc,EAAAA,EAAAA,MAAA,MAAmBN,UAAU,OAAME,SAAA,EACjCI,EAAAA,EAAAA,MAAA,UACEN,UAAS,mCAAAO,OACP9B,IAAqBe,EAAW,cAAgB,qBAElDgB,QAASA,IAAMlB,EAAoBE,GACnC,gBAAef,IAAqBe,EACpC,mBAAAe,OAAkBf,EAAQ,WAAUU,SAAA,EAEpCH,EAAAA,EAAAA,KAAA,QAAMC,UAAU,YAAWE,SAAEV,KAC7BO,EAAAA,EAAAA,KAAA,QAAMC,UAAU,cAAaE,SAAEzB,IAAqBe,EAAW,SAAM,cAGtEf,IAAqBe,IACpBO,EAAAA,EAAAA,KAAA,MAAIU,GAAE,GAAAF,OAAKf,EAAQ,WAAWQ,UAAU,sBAAqBE,SAC1DC,OAAOC,KAAK5B,EAAKgB,IAA4Ba,KAAKV,IACjDW,EAAAA,EAAAA,MAAA,MAAAJ,SAAA,EACEI,EAAAA,EAAAA,MAAA,UACEN,UAAS,mCAAAO,OACP7B,IAAkBiB,EAAQ,cAAgB,qBAE5Ca,QAASA,IAAMd,EAAiBC,GAChC,gBAAejB,IAAkBiB,GAASb,EAAea,GACzD,mBAAAY,OAAkBZ,EAAK,cAAaO,SAAA,CAEnCP,GACDI,EAAAA,EAAAA,KAAA,QAAMC,UAAU,cAAaE,SAAExB,IAAkBiB,GAASb,EAAea,GAAS,SAAM,cAGzFjB,IAAkBiB,GAASb,EAAea,KACzCI,EAAAA,EAAAA,KAAA,MAAIU,GAAE,GAAAF,OAAKZ,EAAK,cAAcK,UAAU,sBAAqBE,SAC1DC,OAAOC,KAAK5B,EAAKC,GAAkBkB,IAAQU,KAAKP,IAC/CC,EAAAA,EAAAA,KAAA,MAAAG,UACEH,EAAAA,EAAAA,KAAA,UACEC,UAAS,mCAAAO,OACPtB,IAAqBa,EAAW,cAAgB,qBAElDU,QAASA,IAAMX,EAAoBC,GAAUI,UAE7CH,EAAAA,EAAAA,KAAA,MAAAG,SAAKJ,OAPAA,SAhBRH,SAhBRH,YAwDnBnB,EAAQqC,YAAc,UAEtB,S","sources":["components/Sidebar.tsx"],"sourcesContent":["import React, { memo, useCallback, useState, useEffect } from 'react';\nimport { AppData } from '../types';\n\ninterface SidebarProps {\n  data: AppData;\n  selectedCategory: keyof AppData | null;\n  selectedTopic: string | null;\n  setSelectedCategory: React.Dispatch<React.SetStateAction<keyof AppData | null>>;\n  setSelectedTopic: React.Dispatch<React.SetStateAction<string | null>>;\n  setSelectedSubtopic: React.Dispatch<React.SetStateAction<string | null>>;\n}\n\nconst Sidebar: React.FC<SidebarProps> = memo(({\n  data,\n  selectedCategory,\n  selectedTopic,\n  setSelectedCategory,\n  setSelectedTopic,\n  setSelectedSubtopic\n}) => {\n  const [expandedTopics, setExpandedTopics] = useState<Record<string, boolean>>({});\n  const [selectedSubtopic, setLocalSelectedSubtopic] = useState<string | null>(null);\n\n  // Ensure topic is expanded when selected\n  useEffect(() => {\n    if (selectedTopic) {\n      setExpandedTopics(prev => ({\n        ...prev,\n        [selectedTopic]: true\n      }));\n    }\n  }, [selectedTopic]);\n\n  const handleCategoryClick = useCallback((category: keyof AppData) => {\n    setSelectedCategory(prevCategory => {\n      // If clicking the same category, toggle it off\n      if (prevCategory === category) {\n        setSelectedTopic(null);\n        setSelectedSubtopic(null);\n        return null;\n      }\n      // Otherwise, select the new category\n      setSelectedTopic(null);\n      setSelectedSubtopic(null);\n      return category;\n    });\n  }, [setSelectedCategory, setSelectedTopic, setSelectedSubtopic]);\n\n  const handleTopicClick = useCallback((topic: string) => {\n    setSelectedTopic(prevTopic => {\n      // If clicking the same topic, toggle it off\n      if (prevTopic === topic) {\n        setSelectedSubtopic(null);\n        return null;\n      }\n      // Otherwise, select the new topic\n      setSelectedSubtopic(null);\n      return topic;\n    });\n\n    // Always expand the topic when clicked\n    setExpandedTopics(prev => ({\n      ...prev,\n      [topic]: true\n    }));\n  }, [setSelectedTopic, setSelectedSubtopic]);\n\n  const handleSubtopicClick = useCallback((subtopic: string) => {\n    // Always set the subtopic, never toggle it off when clicking the same one\n    setSelectedSubtopic(subtopic);\n    setLocalSelectedSubtopic(subtopic);\n  }, [setSelectedSubtopic]);\n\n  return (\n    <div className=\"w-1/4 bg-gray-900 p-4 overflow-y-auto\" role=\"navigation\">\n      <ul className=\"space-y-2\">\n        {Object.keys(data).map((category) => (\n          <li key={category} className=\"mb-4\">\n            <button\n              className={`w-full text-left p-2 rounded-md ${\n                selectedCategory === category ? 'bg-blue-700' : 'hover:bg-gray-800'\n              }`}\n              onClick={() => handleCategoryClick(category as keyof AppData)}\n              aria-expanded={selectedCategory === category}\n              aria-controls={`${category}-topics`}\n            >\n              <span className=\"font-bold\">{category}</span>\n              <span className=\"float-right\">{selectedCategory === category ? '▼' : '▶'}</span>\n            </button>\n            \n            {selectedCategory === category && (\n              <ul id={`${category}-topics`} className=\"ml-4 mt-2 space-y-1\">\n                {Object.keys(data[category as keyof AppData]).map((topic) => (\n                  <li key={topic}>\n                    <button\n                      className={`w-full text-left p-2 rounded-md ${\n                        selectedTopic === topic ? 'bg-blue-600' : 'hover:bg-gray-800'\n                      }`}\n                      onClick={() => handleTopicClick(topic)}\n                      aria-expanded={selectedTopic === topic && expandedTopics[topic]}\n                      aria-controls={`${topic}-subtopics`}\n                    >\n                      {topic}\n                      <span className=\"float-right\">{selectedTopic === topic && expandedTopics[topic] ? '▼' : '▶'}</span>\n                    </button>\n                    \n                    {selectedTopic === topic && expandedTopics[topic] && (\n                      <ul id={`${topic}-subtopics`} className=\"ml-4 mt-1 space-y-1\">\n                        {Object.keys(data[selectedCategory][topic]).map((subtopic) => (\n                          <li key={subtopic}>\n                            <button\n                              className={`w-full text-left p-2 rounded-md ${\n                                selectedSubtopic === subtopic ? 'bg-blue-500' : 'hover:bg-gray-800'\n                              }`}\n                              onClick={() => handleSubtopicClick(subtopic)}\n                            >\n                              <em>{subtopic}</em>\n                            </button>\n                          </li>\n                        ))}\n                      </ul>\n                    )}\n                  </li>\n                ))}\n              </ul>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n});\n\nSidebar.displayName = 'Sidebar';\n\nexport default Sidebar;\n"],"names":["Sidebar","memo","_ref","data","selectedCategory","selectedTopic","setSelectedCategory","setSelectedTopic","setSelectedSubtopic","expandedTopics","setExpandedTopics","useState","selectedSubtopic","setLocalSelectedSubtopic","useEffect","prev","_objectSpread","handleCategoryClick","useCallback","category","prevCategory","handleTopicClick","topic","prevTopic","handleSubtopicClick","subtopic","_jsx","className","role","children","Object","keys","map","_jsxs","concat","onClick","id","displayName"],"sourceRoot":""}